/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  8
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     pimpleFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         5;

deltaT          1e-5;

writeControl    adjustableRunTime;

deltaWrite      1e-1;

writeInterval   $deltaWrite;

purgeWrite      0;

writeFormat     binary;

writePrecision  10;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;

adjustTimeStep  yes;

maxCo           0.9;

// ************************************************************************* //

functions
{

//    #includeFunc MachNo
    #includeFunc residuals

forces_object
{
    type forces;
    functionObjectLibs ("libforces.so");

    //writeControl outputTime;
    //writeControl   timeStep;
    writeControl   adjustableRunTime;
    writeInterval  $deltaWrite;

    enabled true;
 
    //// Patches to sample
    patches ( "cylinder" );

    //// Name of fields
    pName p;
    Uname U;

    //only for incompressible flows
    rho rhoInf;
    rhoInf 1;

    //// Centre of rotation
    CofR (0.0 0 0.5);
}

///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////

forceCoeffs_object
{
    type forceCoeffs;
    functionObjectLibs ("libforces.so");

    enabled true;

    patches ( "cylinder" );

    pName p;
    Uname U;

    //only for incompressible flows
    rho rhoInf;
    rhoInf 1;

    //// Dump to file
    log true;

    CofR (0.0 0 0.5);

    pitchAxis (0 0 1);
    magUInf 100;
    lRef 1;		// reference length for moments!!!
    Aref 1;		// reference area for force coefficient computation
			// This is the projected area using a depth of 1 

    //writeControl   timeStep;
    writeControl   adjustableRunTime;
    writeInterval  $deltaWrite;

    liftDir     (0 1 0);			//-sin AOA, cos AOA, 0 AOA in RAD
    dragDir     (1 0 0);			// cos AOA, sin AOA, 0 AOA in RAD

}

///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////

minmaxdomain
{
    type fieldMinMax;

    functionObjectLibs ("libfieldFunctionObjects.so");

    enabled true;

    mode component;

    //writeControl timeStep;
    writeControl  adjustableRunTime;
    writeInterval $deltaWrite;

    log true;

    fields (p U nuTilda nut k omega);
}

///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////

yplus
{
    type yPlus;
    functionObjectLibs ("libutilityFunctionObjects.so");
    enabled true;
    log	true;
    writeControl outputTime;   
}

///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
/*
fieldAverage1
{
    type            fieldAverage;
    libs ( "libfieldFunctionObjects.so" );
    writeControl    writeTime;
    fields
    (
        U
        {
                 mean        on;
                 prime2Mean  on;
                 base        time;
        }

        p
        {
                 mean        on;
                 prime2Mean  on;
                 base        time;
        }

        nut
        {
                 mean        on;
                 prime2Mean  on;
                 base        time;
        }
    );
}
*/
///////////////////////////////////////////////////////////////////////////

};
